name: workflow-api

on: [push, pull_request]

jobs:
    continuous-integration:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Setup Node.js
              uses: actions/setup-node@v2
              with:
                  node-version: "20.x"

            - name: Create environment variable file
              run: |
                  echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
                  echo "PORT_SERVER=${{ secrets.PORT_SERVER }}" >> .env
                  echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
                  echo "CLIENT_ID_GOOGLE=${{ secrets.CLIENT_ID_GOOGLE }}" >> .env
                  echo "CLIENT_ID_GITHUB=${{ secrets.CLIENT_ID_GITHUB }}" >> .env
                  echo "CLIENT_SECRET_GITHUB=${{ secrets.CLIENT_SECRET_GITHUB }}" >> .env
                  echo "SMTP_HOST=${{ secrets.SMTP_HOST }}" >> .env
                  echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> .env
                  echo "SMTP_EMAIL_USERNAME=${{ secrets.SMTP_EMAIL_USERNAME }}" >> .env
                  echo "SMTP_EMAIL_PASSWORD=${{ secrets.SMTP_EMAIL_PASSWORD }}" >> .env
                  echo "EMAIL_SEND=${{ secrets.EMAIL_SEND }}" >> .env

            - name: Setup SSH for deployment
              uses: webfactory/ssh-agent@v0.7.0
              with:
                  ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

            - name: Add server to known_hosts
              run: |
                  ssh-keyscan -H 3.128.120.40 >> ~/.ssh/known_hosts

            - name: Deploy to server
              run: |
                  ssh -o StrictHostKeyChecking=no ubuntu@3.128.120.40 << 'EOF'
                  cd /home/ubuntu/API
                  git pull api master
                  docker build --build-arg DATABASE_URL="${{ secrets.DATABASE_URL }}" -t api-loja .

                  # Verifica se o container já está em execução e o remove se necessário
                  if [ "$(docker ps -q -f name=api-loja)" ]; then
                      echo "Stopping and removing existing container..."
                      docker stop api-loja
                      docker rm api-loja
                  else
                      echo "No existing container named 'api-loja' is running."
                  fi

                  # Executa o novo container
                  echo "Starting new container..."
                  docker run -d --name api-loja -p 5002:5002 --restart unless-stopped api-loja
                  EOF
